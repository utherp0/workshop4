apiVersion: v1
items:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
    name: username-distribution
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: quay.io/openshiftlabs/username-distribution:latest
      generation: 2
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      template: redis-persistent-template
    name: redis
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: redis
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: redis
      spec:
        containers:
        - env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: REDIS_PASSWORD
                name: redis
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/redis/data
            name: redis-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - redis
        from:
          kind: ImageStreamTag
          name: redis:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: username-distribution
      app.kubernetes.io/component: username-distribution
      app.kubernetes.io/instance: username-distribution
      app.kubernetes.io/part-of: username-distribution-app
    name: username-distribution
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: username-distribution
      deploymentconfig: username-distribution
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: username-distribution
          deploymentconfig: username-distribution
      spec:
        containers:
        - env:
          - name: LAB_REDIS_HOST
            value: "redis"
          - name: LAB_REDIS_PASS
            valueFrom:
              secretKeyRef:
                key: REDIS_PASSWORD
                name: redis
          - name: LAB_TITLE
            value: "OpenShift Developer Experience Workshop"
          - name: LAB_USER_PREFIX
            value: "user"
          - name: LAB_MODULE_URLS
            value: "{% for module in workshop_manifests[:-1] %}{{ 'http://' + workshopper_route.result.spec.host + '/workshop/' + module['id'] + '/lab/' + module['labs'][0]['id'] + '?userid=%USERNAME%;' + module['title'] + ',' }}{% endfor %}{{ 'http://' + workshopper_route.result.spec.host + '/workshop/' + workshop_manifests[-1]['id'] + '/lab/' + workshop_manifests[-1]['labs'][0]['id'] + '?userid=%USERNAME%;' + workshop_manifests[-1]['title'] }}"
          - name: LAB_EXTRA_URLS
            value: "{% for extra_url in extra_urls[:-1] %}{{ extra_url['url'] + ';' + extra_url['title'] + ',' }}{% endfor %}{{ extra_urls[-1]['url'] + ';' + extra_urls[-1]['title'] }}"
          - name: LAB_USER_COUNT
            value: "{{ user_count }}"
          - name: LAB_USER_ACCESS_TOKEN
            value: "{{ username_app_user_pass }}"
          - name: LAB_ADMIN_PASS
            value: "{{ username_app_admin_pass }}"
          - name: LAB_DURATION_HOURS
            value: "1y"
          imagePullPolicy: IfNotPresent
          name: username-distribution
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - username-distribution
        from:
          kind: ImageStreamTag
          name: username-distribution:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
    labels:
      template: redis-persistent-template
    name: redis
  spec:
    ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      name: redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: username-distribution
      app.kubernetes.io/component: username-distribution
      app.kubernetes.io/instance: username-distribution
      app.kubernetes.io/name: ""
      app.kubernetes.io/part-of: username-distribution-app
      app.openshift.io/runtime: ""
      app.openshift.io/runtime-version: latest
    name: username-distribution
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: username-distribution
      deploymentconfig: username-distribution
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    labels:
      app: username-distribution
      app.kubernetes.io/component: username-distribution
      app.kubernetes.io/instance: username-distribution
      app.kubernetes.io/name: ""
      app.kubernetes.io/part-of: username-distribution-app
      app.openshift.io/runtime: ""
      app.openshift.io/runtime-version: latest
    name: username-distribution
  spec:
    port:
      targetPort: 8080-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: username-distribution
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
    labels:
      template: redis-persistent-template
    name: redis
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
kind: List
resources: {}